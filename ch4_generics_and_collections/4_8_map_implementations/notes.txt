Map unlike other Collections interfaces does not extend the Collection interface. Map is extended by the SortedMap interface 
and implementations include HashMa, LinkedHashMap and TreeMap.
TreeMap is a type of SortedMap and the other two are implementations of the Map interface.

Implementations of the Map interface do not guarantee that objects will be retrieved in the same order they were inserted.
Maps do not allow for the addition of duplicate keys.

HashMap use the hash-value generated by calling the hashCode method on the key to be inserted or retrieved. Methods of the HashMap
class are not synchronized so aren't safe to use in multithreaded code.

It's possible to initialise a HashMap by passing in another Map to the HashMap constructor. Any additions or removals from 
the original map passed as argument to the constructor are not reflected in the newly created HashMap.
It is important to ensure that the map argument passed to the constructor is of the same type as the type arguments specified
on the reference variable.

To check whether a key or value exists in a map you can make a call to the containsKey() or containsValue() methods.
To retrieve an element from a map you can make a call to the get() method passing in an Object argument. 
Methods get() and containsKey() make use of the hashCode() and equals() methods so these methods must be correctly overridden.

When adding a key-value pair to a map where the key already exists the value is overwritten with the value of the later object.
Null keys are acceptable in a HashMap.

Calling the remove method on a HashMap returns the value of the key specified for removal.

It is possible to copy the values from one map to another using the putAll() method. If the keys in the map to be copied already exist
in the map to copy to then the values in the map being copied to are overwritten with the values of the map being copied from.

There are methods in the Map interface for getting all of the keys, all of the values or all of the key-value pairs of a map.
The keySet() method returns all of the keys of a map while the values() method returns all of the values and entrySet
returns a set of key-value pairs from the map.

LinkedHashMap extends HashMap but provides a predictable iteration order. Each of the elements in a LinkedHashMap is a doubly
linked list and this ensures that elements are retrieved in the same order they are inserted.

A TreeMap is sorted according to the natural order of its keys or by the order defined in a comparator passed to the 
constructor of the TreeMap.
Because TreeMaps are sorted querying them is faster than trying to query unsorted map implementations such as HashMap.

It is possible to declare a TreeMap of user defined objects that do not implement the Comparable interface and does not take
a Comparator as argument however when trying to add elements to the TreeMap a ClassCastException is thrown.
This is because the call to the put method in TreeMap makes a call to an internal compare method which attempts to cast the 
object being added to the map to Comparable. If the object doesn't implement the Comparable interface cast fails.


When adding user defined objects that implement the Comparable interface to a TreeMap that is passed a Comparator then the order
defined by the compareTo method of the user defined class is ignored as the order defined in the Comparator takes precedence.

Whereas HashMap must use the equals and hashCode methods to determine key equality TreeMap doesn't need to. TreeMap determines
the equality of keys using the compareTo method of the class if it implements Comprable or the compare method of the Comparator
object passed to the constructor, there is no need to override equals or hashCode methods to ensure retrieval of objects.