Java naming conventions are such that uppercase single characters should be used when defining type parameters. This makes them easier to 
distinguish from other variables and methods within a class.

It is possible to use the name of another class as a type parameter and still be generic. Example:

class MyClass {}
public class Parcel<MyClass> { 

    public void set(MyClass t) { }  // MyClass here refers to the type parameter declared at the top of the class, not the actual class MyClass
}

Generic classes can extend other generic classes but the derived clases must be able to pass type parameters back to its base class. 
Should a derived class fail to meet this criteria compilation will fail. For example the following is an acceptable extension of a generic class:

class Product<T> { }
class CleaningProduct<T> extends Product<T> { }

In the above the CleaningProduct class extends Product and they share the type parameter T. This allows the Product class to be aware of the 
type information used with CleaningProduct.
An example of an incorrect extension of a generic class is:

class Product<X> { }
class CleaningProduct<Y> extends Product<X> { }

The above code will fail to compile as the Product class will not be able to identify the type information of CleaningProduct as they have different 
type parameters.

Generic base classes can be extended by non generic derived clases:

class Product<T> { }
class ToiletCleaningProduct extends Product<T> { }

but the non generic derived class does not accept any type parameters so the following will fail to compile:

ToiletCleaningProduct<String> prod = new ToiletCleaningProduct<>();

Interfaces can also be defined using generic type parameters. Generic interfaces are defined as:

public interface MyInterface<A, B> {

    public void add(A val1, B val2) {
    
    }
    
    public A getA() {
        return a;
    }
    
    public B getB() {
        return b;
    }
}

Non-generic classes that implement a generic interface don't have the type parameters follow the class name, they are replaced by
literal types in the declaration of the implemented interface. For example:

public class MyNonGenericClass implements MyInterface<String, Integer> { }

For generic classes that implements generic interfaces type parameters must follow both the class name and name of the implemented
interface. E.g:

public MyGenericClass<T> implements MyInterface<T> { }

When implementing an interface with multiple type parameters it is possible to only implement one of those while defining a literal value
for the other. E.g:

public class MyNonGenericClass<B> implements MyInterface<String, B> { }
public class MyNonGenericClass<A> implements MyInterface<A, Integer> { }

Generic methods can be defined in generic or non-generic classes. To define a generic method in a non-generic class the type
parameters must be defined just before the return type of the method. E.g:

public class MyNonGenericClass {
    public <E> void print(E e) { }
}

Generic methods definied in a generic class should look like the following:
public class GenericClass<T> {
    public <E> void print(E e) { }
}

It is possible to limit the type of objects that can be passed as arguments to generic classes and interfaces by using bounded generic types.
Use of a bounded type parameter allows for access to members defined within the superclass of a type parameter. Without a bounded
type parameter only members defined in the Object class can be accessed.